;;;;;;;;;;;;;;;;;;;;;
; About manager.ini ;
;;;;;;;;;;;;;;;;;;;;;
;
; The manager's initialization file, called manager.ini, is responsible for
; configuring basic aspects of the Manager components - the API, the UI, the
; Monitor and the execution package (e.g. GREX).

; Manager components look for this file in /etc/mariadbmanager
;
; The syntax of the file is extremely simple.  Whitespace and lines
; beginning with a semicolon or hash are silently ignored (as you probably 
; guessed).
;
; Directives are specified using the following syntax:
; directive = value
; For strings, quotes are optional
; For numbers, quotes are optional
; Directive names are case sensitive - foo=bar is different from FOO=bar.
; However, key words such as True or None are not case sensitive
; Directives are variables used to configure Manager components.
; There is no name validation.  If the Manager can't find an expected
; directive because it is not set or is mistyped, a default value may be used,
; or in the case of essential information such as API keys, the Manager will
; fail to function.
;
; The standard installation process will create a valid manager.ini file that
; can then be customised as required.
;
; Boolean flags can be turned on using the values On, True or Yes.
; They can be turned off using the values Off, False or No.
;
; An empty string can be denoted by simply not writing anything after the equal
; sign, or by using the None keyword:

;  foo =         ; sets foo to an empty string
;  foo = None    ; sets foo to an empty string
;  foo = "None"  ; sets foo to the string 'None'
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Common data - required on every machine that runs a Manager component ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; The API keys section provides security for calls to the API
;
; An arbitrary number of keys can be specified.  Each key must be assigned
; to an integer, which is the API Key ID.  Corresponding to the ID is
; the actual API Key.  It can be any arbitrary string of 32 characters - a
; convenient way to create meaningless keys is to take the MD5 hash of some
; random text.
;
; Each piece of software that uses the API should have its own ID and key.
[apikeys]

;
; The API host section tells Manager components where to find the API.
; When all components run on the same machine, localhost can be used, but 
; if the components are deployed on different machines then an IP address or
; a hostname that can be resolved is required
[apihost]
uri = "http://localhost/restfulapi"
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data that is specific to the Monitor component   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; When components of the Manager run on different machines, this section should
; be included on the machine that runs the Monitor, and is not required elsewhere.
;
; The key_allocation option determines which API key and ID will be used by the
; Monitor.  The actual keys are found in the apikeys section.  The value for
; apikeyid must be an integer.
[monitor]
apikeyid = 2
; 
; The logging option controls how the Monitor will log information to syslog.  
; More information will be logged if the verbose option is set to yes 
; (or true, on, etc).  It is a boolean
verbose = no
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data that is specific to the UI component   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; When components of the Manager run on different machines, this section should
; be included on the machine that runs the UI, and is not required elsewhere.
;
; The key_allocation option determines which API key and ID will be used by the
; UI.  The actual keys are found in the apikeys section.  The value for
; apikeyid must be an integer.
[ui]
apikeyid = 1
; 
; The logging option controls how the UI will log information to syslog.  
; More information will be logged if the verbose option is set to yes 
; (or true, on, etc).  It is a boolean
verbose = no
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data that is specific to the Execution component   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; When components of the Manager run on different machines, this section should
; be included on the machine that runs the Execution system (e.g. GREX), and is 
; not required elsewhere.
; Note that the Execution system always starts running, and looks for its 
; configuration, on the same machine as the API.
;
; The key_allocation option determines which API key and ID will be used by the
; Execution System.  The actual keys are found in the apikeys section.  The value
; for apikeyid must be an integer.
[execution]
apikeyid = 3
; 
; The logging option controls how the Execution system will log information to
; syslog.  
; More information will be logged if the verbose option is set to yes 
; (or true, on, etc).  It is a boolean
verbose = no
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data that is required only on the machine running the API ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; The remaining data does not need to be installed on machines
; running components other than the API, but will not cause anything
; to fail if it is included there (just reduce efficiency a little)

; The database section defines access to the administration and monitoring
; DB used by the API
; 
; Current development relies on SQLite for the admin DB and
; the parameters are the path to the SQLite file and the PDO
; connection string for the SQLite DB.  User and password are
; not currently used, and are included only in case a different
; database might be used in future.
[database]
pdoconnect = "sqlite:/usr/local/skysql/SQLite/AdminConsole/admin"
monconnect = "sqlite:/usr/local/skysql/SQLite/AdminConsole/monitor"
user = ""
password = ""
monuser = ""
monpassword = ""
;
; The backups section configures how backups will operate.  The
; path indicates the base location on the manager system for storing
; backups and backup logs
;
[backups]
path = "/usr/local/skysql/backups/"
;
; The shell section configures how shell commands will run. It contains
; a path, which indicates the location of the RunCommand.sh script that
; runs the various commands that can be executed through the API.
; The API also needs to know where to find the PHP executable in 
; order to know how to implement scheduled commands.
;
[shell]
path = "/usr/local/skysql/scripts/api/"
php = "/usr/bin/php"
;
; Monitor defaults determines how many readings and what intervals the
; API will return to a request for Monitor data, if no such parameters
; are specified in the request.  The interval is in seconds.  The
; defaults indicate that a total of 15 values will be returned, each
; one covering a period of half an hour, covering a total of 7.5 hours.
; Values are integers.
[monitor-defaults]
interval = 1800
count = 15
;
; Resultset defaults determines how many data items will be returned for 
; potentially large result sets.  Values are integers
[resultset-defaults]
limit = 10
;
; The cache section provides configuration details for data caching
;
; Directory must point to a writeable directory for storing cached data.
; Timelimit is the number of seconds for which a data item in cache remains valid.
; Sizelimit is the maximum number of bytes for a cached item.  The limits
; are integers.
[cache]
directory = "/usr/local/skysql/cache/api";
timelimit = 3600
sizelimit = 500000
;
; The debug section allows options to aid in development of API clients
;
; The error email address, if specified, will be used to notify errors.
; Showheaders can be "yes", in which case all the headers sent by the API in
;  the response will also be included in the body of the response as a 
;  property "responseheaders"
; Reflectheaders can be "yes", in which case all responses will include a
;  property "requestheaders" that is an object with properties and values 
; corresponding to the headers received in the request.
; Showhttpcode can be "yes", in which case the HTTP result code will always
;  be included as a property of the response.  
; Apart from the email address, these items are booleans.
[debug]
erroremail = "someone@example.com"
showheaders = no
reflectheaders = no
showhttpcode = no
; 
; The logging section controls how the API will log information to syslog.  
;
; More information will be logged if the verbose option is set  to yes 
; (or true, on, etc).  This is a boolean
[logging]
verbose = no
